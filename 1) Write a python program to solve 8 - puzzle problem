import heapq
GOAL = [1,2,3,4,5,6,7,8,0]
def manhattan(state):
    return sum(abs((val-1)//3 - i//3) + abs((val-1)%3 - i%3)
               for i, val in enumerate(state) if val)
def neighbors(state):
    i = state.index(0)
    x, y = divmod(i, 3)
    moves = []
    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        nx, ny = x+dx, y+dy
        if 0<=nx<3 and 0<=ny<3:
            j = nx*3 + ny
            new = state[:]
            new[i], new[j] = new[j], new[i]
            moves.append(new)
    return moves
def is_solvable(state):
    inv = sum(state[i] > state[j] for i in range(8) for j in range(i+1,9) if state[i] and state[j])
    return inv % 2 == 0
def solve(start):
    if not is_solvable(start):
        return None
    heap = [(manhattan(start), 0, start, [])]
    seen = set()
    while heap:
        f, g, state, path = heapq.heappop(heap)
        if state == GOAL:
            return path + [state]
        seen.add(tuple(state))
        for nei in neighbors(state):
            if tuple(nei) not in seen:
                heapq.heappush(heap, (g+1+manhattan(nei), g+1, nei, path + [state]))
    return None
start = [1,2,3,4,0,6,7,5,8]
solution = solve(start)
if solution:
    print(f"Solved in {len(solution)-1} moves:")
    for s in solution:
        for i in range(0, 9, 3): print(s[i:i+3])
        print()
else:
    print("Unsolvable puzzle.")


OUTPUT :-

Solved in 2 moves:
[1, 2, 3]
[4, 0, 6]
[7, 5, 8]

[1, 2, 3]
[4, 5, 6]
[7, 0, 8]

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]
