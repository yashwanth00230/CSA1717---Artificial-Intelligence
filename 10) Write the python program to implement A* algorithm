import heapq
class Node:
    def __init__(self, position, parent=None):
        self.position = position  
        self.parent = parent
        self.g = 0 
        self.h = 0  
        self.f = 0  
    def __lt__(self, other):  
        return self.f < other.f
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])
def astar(grid, start, end):
    open_list = []
    closed_set = set()
    start_node = Node(start)
    goal_node = Node(end)
    heapq.heappush(open_list, start_node)
    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  
        closed_set.add(current_node.position)
        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            x, y = current_node.position[0] + dx, current_node.position[1] + dy
            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0:
                neighbor_pos = (x, y)
                if neighbor_pos in closed_set:
                    continue
                neighbor = Node(neighbor_pos, current_node)
                neighbor.g = current_node.g + 1
                neighbor.h = heuristic(neighbor_pos, end)
                neighbor.f = neighbor.g + neighbor.h
                if any(open_node.position == neighbor.position and open_node.g <= neighbor.g for open_node in open_list):
                    continue
                heapq.heappush(open_list, neighbor)
    return None  
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0],
]
start = (0, 0)
end = (3, 4)
path = astar(grid, start, end)
print("Path:", path)



OUTPUT :-
Path: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3), (3, 4)]
